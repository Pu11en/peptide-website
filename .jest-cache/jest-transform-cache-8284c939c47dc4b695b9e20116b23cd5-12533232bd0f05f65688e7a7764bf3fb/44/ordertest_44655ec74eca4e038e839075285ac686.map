{"file":"C:\\Users\\drewp\\OneDrive\\Desktop\\incredible peptides\\incredible-peptides\\tests\\order.test.ts","mappings":";;AAAA,2CAA+D;AAC/D,kDAA6C;AAE7C,IAAA,kBAAQ,EAAC,WAAW,EAAE,GAAG,EAAE;IACzB,IAAA,mBAAS,EAAC,GAAG,EAAE;QACb,yEAAyE;QACzE,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,EAAE,CAAA;QAC7B,mDAAmD;QACnD,aAAa;QACb,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAA;IAC1D,CAAC,CAAC,CAAA;IAEF,IAAA,YAAE,EAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QACjD,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,6BAA6B,EAAE;YACrD,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;YAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,KAAK,EAAE,wBAAwB;gBAC/B,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,gBAAgB,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;aAC9D,CAAC;SACH,CAAC,CAAA;QAEF,MAAM,GAAG,GAAG,MAAM,IAAA,YAAI,EAAC,GAAG,CAAC,CAAA;QAC3B,IAAA,gBAAM,EAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAC5B,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAA;QAC7B,IAAA,gBAAM,EAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC/B,IAAA,gBAAM,EAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAClC,IAAA,gBAAM,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAClC,IAAA,gBAAM,EAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IAClC,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["C:\\Users\\drewp\\OneDrive\\Desktop\\incredible peptides\\incredible-peptides\\tests\\order.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll } from '@jest/globals'\nimport { POST } from '@/app/api/orders/route'\n\ndescribe('Order API', () => {\n  beforeAll(() => {\n    // Ensure DB is not used in tests; route will fall back to static pricing\n    process.env.DATABASE_URL = ''\n    // Prevent actual network calls to n8n during tests\n    // @ts-ignore\n    global.fetch = jest.fn().mockResolvedValue({ ok: true })\n  })\n\n  it('creates order with static pricing', async () => {\n    const req = new Request('http://localhost/api/orders', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        email: 'researcher@example.com',\n        items: [{ slug: 'bpc-157-tb-500', quantity: 1, size: '5mg' }],\n      }),\n    })\n\n    const res = await POST(req)\n    expect(res.status).toBe(200)\n    const data = await res.json()\n    expect(data.success).toBe(true)\n    expect(data.totalCents).toBe(8999)\n    expect(data.persisted).toBe(false)\n    expect(data.usingDb).toBe(false)\n  })\n})"],"version":3}