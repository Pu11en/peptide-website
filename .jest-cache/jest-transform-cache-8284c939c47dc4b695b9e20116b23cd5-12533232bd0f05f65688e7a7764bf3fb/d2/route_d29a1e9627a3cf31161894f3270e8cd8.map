{"file":"C:\\Users\\drewp\\OneDrive\\Desktop\\incredible peptides\\incredible-peptides\\app\\api\\orders\\route.ts","mappings":"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","names":[],"sources":["C:\\Users\\drewp\\OneDrive\\Desktop\\incredible peptides\\incredible-peptides\\app\\api\\orders\\route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport prisma from '@/lib/prisma'\nimport { z } from 'zod'\nimport { withErrorHandling } from '@/lib/errorHandler'\n\n// Zod schema for incoming order payload\nconst OrderSchema = z.object({\n  email: z.string().email(),\n  items: z\n    .array(\n      z.object({\n        slug: z.string(),\n        quantity: z.number().int().min(1),\n        size: z.string().optional(),\n      })\n    )\n    .min(1),\n  metadata: z.record(z.any()).optional(),\n})\n\n// Create an order, persist to Prisma if available, and fire-and-forget n8n webhook\nexport const POST = withErrorHandling(async (req: Request) => {\n    const json = await req.json()\n    const parsed = OrderSchema.safeParse(json)\n    if (!parsed.success) {\n      return NextResponse.json(\n        { error: 'Invalid payload', issues: parsed.error.flatten() },\n        { status: 400 }\n      )\n    }\n\n    const { email, items, metadata } = parsed.data\n\n    // Try to price via Prisma products; fallback to static app/data/products.ts if DB not configured\n    const slugs = items.map((i) => i.slug)\n    let usingDb = false\n    let dbProducts: Array<{ id: number; slug: string; priceCents: number }> = []\n\n    if (process.env.DATABASE_URL) {\n      try {\n        dbProducts = await prisma.product.findMany({\n          where: { slug: { in: slugs } },\n          select: { id: true, slug: true, priceCents: true },\n        })\n        usingDb = dbProducts.length === items.length\n      } catch (err) {\n        usingDb = false\n      }\n    }\n\n    let totalCents = 0\n    const orderItemsForCreate: Array<{\n      productId?: number\n      quantity: number\n      priceCents: number\n      slug: string\n    }> = []\n\n    if (usingDb) {\n      const map = new Map(dbProducts.map((p) => [p.slug, p]))\n      for (const item of items) {\n        const p = map.get(item.slug)\n        if (!p) {\n          return NextResponse.json({ error: `Unknown product: ${item.slug}` }, { status: 400 })\n        }\n        const pricePer = p.priceCents\n        totalCents += pricePer * item.quantity\n        orderItemsForCreate.push({ productId: p.id, quantity: item.quantity, priceCents: pricePer, slug: item.slug })\n      }\n    } else {\n      // Fallback to static product list\n      const { products } = await import('@/app/data/products')\n      const map = new Map(products.map((p) => [p.id, p]))\n\n      for (const item of items) {\n        const p = map.get(item.slug)\n        if (!p) {\n          return NextResponse.json({ error: `Unknown product: ${item.slug}` }, { status: 400 })\n        }\n        let price = p.price\n        if (item.size) {\n          const found = p.sizes.find((s) => s.size === item.size)\n          price = found?.price ?? p.price\n        }\n        const priceCents = Math.round(price * 100)\n        totalCents += priceCents * item.quantity\n        orderItemsForCreate.push({ quantity: item.quantity, priceCents, slug: item.slug })\n      }\n    }\n\n    let orderId: string | undefined\n    let status: 'PENDING' | 'PAID' | 'CANCELLED' | 'FULFILLED' = 'PENDING'\n    let persisted = false\n\n    if (usingDb) {\n      const created = await prisma.order.create({\n        data: {\n          email,\n          totalCents,\n          status: 'PENDING',\n          items: {\n            create: orderItemsForCreate.map((oi) => ({\n              productId: oi.productId!,\n              quantity: oi.quantity,\n              priceCents: oi.priceCents,\n            })),\n          },\n        },\n        select: { id: true },\n      })\n      orderId = created.id\n      persisted = true\n    }\n\n    // Non-blocking n8n webhook trigger\n    const n8nUrl = process.env.N8N_WEBHOOK_URL\n    if (n8nUrl) {\n      const payload = { orderId, email, items, totalCents, status, persisted, metadata }\n      fetch(n8nUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n        cache: 'no-store',\n      }).catch((err) => {\n        console.error('n8n webhook error', err)\n      })\n    }\n\n    return NextResponse.json({ success: true, orderId, totalCents, status, persisted, usingDb })\n})\n\nexport const runtime = 'nodejs'"],"version":3}