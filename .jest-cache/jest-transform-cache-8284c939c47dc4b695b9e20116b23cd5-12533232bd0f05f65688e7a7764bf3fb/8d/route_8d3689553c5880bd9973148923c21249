dc006d9c40372c25be7d267e05aaf706
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runtime = void 0;
exports.POST = POST;
const server_1 = require("next/server");
const prisma_1 = __importDefault(require("@/lib/prisma"));
const zod_1 = require("zod");
// Zod schema for incoming order payload
const OrderSchema = zod_1.z.object({
    email: zod_1.z.string().email(),
    items: zod_1.z
        .array(zod_1.z.object({
        slug: zod_1.z.string(),
        quantity: zod_1.z.number().int().min(1),
        size: zod_1.z.string().optional(),
    }))
        .min(1),
    metadata: zod_1.z.record(zod_1.z.any()).optional(),
});
// Create an order, persist to Prisma if available, and fire-and-forget n8n webhook
async function POST(req) {
    var _a;
    try {
        const json = await req.json();
        const parsed = OrderSchema.safeParse(json);
        if (!parsed.success) {
            return server_1.NextResponse.json({ error: 'Invalid payload', issues: parsed.error.flatten() }, { status: 400 });
        }
        const { email, items, metadata } = parsed.data;
        // Try to price via Prisma products; fallback to static app/data/products.ts if DB not configured
        const slugs = items.map((i) => i.slug);
        let usingDb = false;
        let dbProducts = [];
        if (process.env.DATABASE_URL) {
            try {
                dbProducts = await prisma_1.default.product.findMany({
                    where: { slug: { in: slugs } },
                    select: { id: true, slug: true, priceCents: true },
                });
                usingDb = dbProducts.length === items.length;
            }
            catch (err) {
                usingDb = false;
            }
        }
        let totalCents = 0;
        const orderItemsForCreate = [];
        if (usingDb) {
            const map = new Map(dbProducts.map((p) => [p.slug, p]));
            for (const item of items) {
                const p = map.get(item.slug);
                if (!p) {
                    return server_1.NextResponse.json({ error: `Unknown product: ${item.slug}` }, { status: 400 });
                }
                const pricePer = p.priceCents;
                totalCents += pricePer * item.quantity;
                orderItemsForCreate.push({ productId: p.id, quantity: item.quantity, priceCents: pricePer, slug: item.slug });
            }
        }
        else {
            // Fallback to static product list
            const { products } = await Promise.resolve().then(() => __importStar(require('@/app/data/products')));
            const map = new Map(products.map((p) => [p.id, p]));
            for (const item of items) {
                const p = map.get(item.slug);
                if (!p) {
                    return server_1.NextResponse.json({ error: `Unknown product: ${item.slug}` }, { status: 400 });
                }
                let price = p.price;
                if (item.size) {
                    const found = p.sizes.find((s) => s.size === item.size);
                    price = (_a = found === null || found === void 0 ? void 0 : found.price) !== null && _a !== void 0 ? _a : p.price;
                }
                const priceCents = Math.round(price * 100);
                totalCents += priceCents * item.quantity;
                orderItemsForCreate.push({ quantity: item.quantity, priceCents, slug: item.slug });
            }
        }
        let orderId;
        let status = 'PENDING';
        let persisted = false;
        if (usingDb) {
            const created = await prisma_1.default.order.create({
                data: {
                    email,
                    totalCents,
                    status: 'PENDING',
                    items: {
                        create: orderItemsForCreate.map((oi) => ({
                            productId: oi.productId,
                            quantity: oi.quantity,
                            priceCents: oi.priceCents,
                        })),
                    },
                },
                select: { id: true },
            });
            orderId = created.id;
            persisted = true;
        }
        // Non-blocking n8n webhook trigger
        const n8nUrl = process.env.N8N_WEBHOOK_URL;
        if (n8nUrl) {
            const payload = { orderId, email, items, totalCents, status, persisted, metadata };
            fetch(n8nUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload),
                cache: 'no-store',
            }).catch((err) => {
                console.error('n8n webhook error', err);
            });
        }
        return server_1.NextResponse.json({ success: true, orderId, totalCents, status, persisted, usingDb });
    }
    catch (err) {
        console.error('Order creation error', err);
        return server_1.NextResponse.json({ error: 'Server error' }, { status: 500 });
    }
}
exports.runtime = 'nodejs';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,